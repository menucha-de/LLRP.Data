<?xml version="1.0"?>
<project name="havis.llrpservice-data" default="publish" xmlns:ivy="antlib:org.apache.ivy.ant">

	<property file="${basedir}/build.properties" />
	<property name="basename" value="${ant.project.name}" />
	<property name="build.dir" location="${basedir}/target" />
	<property name="build.dir.test" location="${build.dir}/test" />
	<property name="build.dir.classes" location="${build.dir}/classes" />
	<property name="build.dir.test.classes" location="${build.dir}/test/classes" />
	<property name="doc.dir" location="${build.dir}/doc" />
	<property name="lib.dir" location="${basedir}/lib" />
	<property name="resources.dir" location="${basedir}/src/main/resources" />
	<property name="src.dir" location="${basedir}/src/main/java" />
	<property name="src.test.dir" location="${basedir}/src/test/java" />
	<property file="${resources.dir}/build.properties" />
	<property file="${resources.dir}/MANIFEST.MF" prefix="manifest" />
	<property name="javac.version" value="8" />

	<path id="build.classpath">
		<fileset dir="${lib.dir}" />
	</path>

	<!-- Checks if the build properties are set prints an error message otherwise -->
	<target name="check.build.properties">
		<condition property="ivy.resolver" else="local">
			<isset property="ivy.resolver" />
		</condition>
		<fail message="Missing property 'api.url'. Does 'build.properties' file exists?" unless="api.url" />
		<fail message="Missing property 'ivy.url'. Does 'build.properties' file exists?" unless="ivy.url" />
	</target>

	<target name="clean-cache" description="Cleans ivy cache">
		<ivy:cleancache />
	</target>

	<target name="clean" description="Cleans the project">
		<delete dir="${build.dir}" />
		<delete dir="${lib.dir}" />
	</target>

	<target name="clean-all" depends="clean, clean-cache" description="Cleans the project and ivy cache" />

	<target name="retrieve">
		<ivy:retrieve log="quiet" />
	</target>

	<!-- Compiles the java source code using javac -->
	<target name="compile" depends="check.build.properties, retrieve">
		<mkdir dir="${build.dir.classes}" />
		<javac srcdir="${src.dir}" destdir="${build.dir.classes}" fork="true" release="${javac.version}" debug="${javac.debug}" includeantruntime="false">
			<classpath>
				<!-- build libraries -->
				<path refid="build.classpath" />
			</classpath>
		</javac>
	</target>

	<target name="test" depends="compile" unless="${skip.test}">
		<mkdir dir="${build.dir.test.classes}" />

		<javac srcdir="${src.test.dir}" destdir="${build.dir.test.classes}" release="${javac.version}" debug="${javac.debug}" includeantruntime="false">
			<classpath>
				<path refid="build.classpath" />
				<pathelement location="${build.dir.classes}" />
			</classpath>
		</javac>

		<junit printsummary="true" fork="yes" dir="${build.dir.test}" haltonerror="yes" haltonfailure="yes" showoutput="true">
			<jvmarg value="-Djmockit-coverage-output=html" />
			<jvmarg value="-Djmockit-coverage-outputDir=${build.dir}/test/coverage-report" />
			<jvmarg value="-Djmockit-coverage-srcDirs=${src.dir}" />
			<classpath>
				<path refid="build.classpath" />
				<pathelement location="${build.dir.classes}" />
				<pathelement location="${build.dir.test.classes}" />
			</classpath>
			<formatter type="plain" />
			<test name="havis.llrpservice.data.TestSuite" todir="${build.dir.test}" />
		</junit>
	</target>

	<target name="jar" depends="compile" description="Creates the binary JAR">
		<!-- create binary JAR -->
		<jar jarfile="${build.dir}/${basename}.jar" basedir="${build.dir.classes}" manifest="${resources.dir}/MANIFEST.MF" />
	</target>

	<target name="jar-src" depends="compile" description="Creates the source JAR">
		<!-- create source JAR -->
		<jar jarfile="${build.dir}/${basename}-sources.jar" basedir="${src.dir}" />
	</target>

	<target name="jar-doc">
		<!-- create javadoc JAR -->
		<javadoc destdir="${doc.dir}" author="true" version="true" use="true" windowtitle="${javadoc.windowtitle}" doctitle="${javadoc.doctitle}" bottom="${javadoc.buttom}">
			<packageset dir="${src.dir}" defaultexcludes="yes" />
			<classpath refid="build.classpath" />
			<group title="Packages" packages="${basename}.*" />
			<link offline="true" href="http://docs.oracle.com/javase/7/docs/api/" packagelistURL="${api.url}/javase/7/" />
		</javadoc>
		<jar jarfile="${build.dir}/${basename}-javadoc.jar" basedir="${doc.dir}" />
	</target>

	<target name="publish" depends="jar, jar-src, jar-doc" description="Publishes the JAR to the repository">
		<ivy:resolve file="${resources.dir}/ivy.xml" />

		<ivy:publish resolver="${ivy.resolver}" pubrevision="${manifest.Bundle-Version}" status="integration" overwrite="true">
			<artifacts pattern="${build.dir}/[artifact].[ext]" />
		</ivy:publish>
	</target>

</project>
